// Mocks generated by Mockito 5.0.7 from annotations
// in intent/test/habit_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:bloc/src/bloc.dart' as _i8;
import 'package:bloc/src/transition.dart' as _i7;
import 'package:intent/bloc/habits_bloc.dart' as _i2;
import 'package:intent/entities/habit_entity.dart' as _i6;
import 'package:intent/models/habit.dart' as _i5;
import 'package:intent/repositories/habits/habit_repository.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeHabitsState extends _i1.Fake implements _i2.HabitsState {}

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

/// A class which mocks [HabitRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHabitRepository extends _i1.Mock implements _i4.HabitRepository {
  MockHabitRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i5.Habit>> habits() =>
      (super.noSuchMethod(Invocation.method(#habits, []),
              returnValue: Stream<List<_i5.Habit>>.empty())
          as _i3.Stream<List<_i5.Habit>>);
  @override
  _i3.Future<void> addHabit(_i6.HabitEntity? habit) =>
      (super.noSuchMethod(Invocation.method(#addHabit, [habit]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}

/// A class which mocks [HabitsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHabitsBloc extends _i1.Mock implements _i2.HabitsBloc {
  MockHabitsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<Type, Function> get eventToStateMap =>
      (super.noSuchMethod(Invocation.getter(#eventToStateMap),
          returnValue: <Type, Function>{}) as Map<Type, Function>);
  @override
  _i2.HabitsState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeHabitsState()) as _i2.HabitsState);
  @override
  _i3.Stream<_i2.HabitsState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.HabitsState>.empty())
          as _i3.Stream<_i2.HabitsState>);
  @override
  _i3.Stream<_i2.HabitsState> mapEventToState(_i2.HabitsEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.HabitsState>.empty())
          as _i3.Stream<_i2.HabitsState>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void add(_i2.HabitsEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.HabitsEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i7.Transition<_i2.HabitsEvent, _i2.HabitsState>> transformEvents(
          _i3.Stream<_i2.HabitsEvent>? events,
          _i8.TransitionFunction<_i2.HabitsEvent, _i2.HabitsState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i7.Transition<_i2.HabitsEvent, _i2.HabitsState>>.empty())
          as _i3.Stream<_i7.Transition<_i2.HabitsEvent, _i2.HabitsState>>);
  @override
  void emit(_i2.HabitsState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i7.Transition<_i2.HabitsEvent, _i2.HabitsState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i7.Transition<_i2.HabitsEvent, _i2.HabitsState>>
      transformTransitions(
              _i3
                      .Stream<_i7.Transition<_i2.HabitsEvent, _i2.HabitsState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i7.Transition<_i2.HabitsEvent, _i2.HabitsState>>.empty())
              as _i3.Stream<_i7.Transition<_i2.HabitsEvent, _i2.HabitsState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.HabitsState> listen(
          void Function(_i2.HabitsState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<_i2.HabitsState>())
          as _i3.StreamSubscription<_i2.HabitsState>);
  @override
  void onChange(_i7.Change<_i2.HabitsState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
